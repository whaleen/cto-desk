// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String         @id @default(cuid())
  wallet        String         @unique
  isActive      Boolean        @default(false)
  isAdmin       Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  sites         Site[]
  subscriptions Subscription[]
  credits       Credit[]
  creditBalance Int            @default(0)
}

model Subscription {
  id               String    @id @default(cuid())
  userId           String
  user             User      @relation(fields: [userId], references: [id])
  product          Product   @relation(fields: [productId], references: [id])
  productId        String
  status           SubStatus @default(ACTIVE)
  quantity         Int       @default(1)
  startDate        DateTime  @default(now())
  currentPeriodEnd DateTime
  cancelAt         DateTime?
  canceledAt       DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  payments         Payment[]

  @@index([userId])
  @@index([productId])
}

model Product {
  id            String          @id @default(cuid())
  name          String
  description   String?
  priceSOL      Float
  interval      BillingInterval
  isActive      Boolean         @default(true)
  subscriptions Subscription[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Payment {
  id              String        @id @default(cuid())
  subscriptionId  String
  subscription    Subscription  @relation(fields: [subscriptionId], references: [id])
  amount          Float
  transactionHash String?
  status          PaymentStatus @default(PENDING)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([subscriptionId])
}

model Credit {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  amount    Int
  reason    String?
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  createdBy String

  @@index([userId])
}

model Site {
  id           String   @id @default(cuid())
  name         String
  subdomain    String?  @unique
  customDomain String?  @unique
  profileImage String?
  bannerImage  String?
  description  String?  @db.Text
  twitterUrl   String?
  telegramUrl  String?
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  theme        Json? // Store theme colors and config

  @@index([userId])
}

model Whitelist {
  id        String   @id @default(cuid())
  wallet    String   @unique
  createdAt DateTime @default(now())
}

model Message {
  id         String   @id @default(uuid())
  projectId  String
  userId     String
  content    String
  timestamp  DateTime @default(now())
  visibility String // "public" or "private"
  mentions   String[] // Optional
}

enum SubStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  SUSPENDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum BillingInterval {
  MONTHLY
  YEARLY
}
